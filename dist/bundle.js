(()=>{var r,n,e={568:(r,n,e)=>{var t={"./cartPage.js":[745,745],"./categoriesPage.js":[2,2],"./categoryPage.js":[20,20],"./homePage.js":[801,801],"./offerPage.js":[881,881],"./orderCompletePage.js":[791,791],"./orderPage.js":[995,995],"./productPage.js":[730,730]};function o(r){if(!e.o(t,r))return Promise.resolve().then((()=>{var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}));var n=t[r],o=n[0];return e.e(n[1]).then((()=>e(o)))}o.keys=()=>Object.keys(t),o.id=568,r.exports=o},174:(r,n,e)=>{"use strict";e.d(n,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"a, a:hover {\r\n    color: white;\r\n    text-decoration: none;\r\n}\r\n\r\n.navbar {\r\n    background-color: #ce2a1d;\r\n}\r\n\r\nmain {\r\n    min-height: 800px;\r\n}\r\n\r\nnav a.nav-link:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n.carousel-item h3 {\r\n    bottom: 15px;\r\n    left: 20px;\r\n}\r\n\r\n#carousel-prev, #carousel-next {\r\n    font-size: 48px;\r\n    transition: color ease 0.3s;\r\n}\r\n\r\n#carousel-prev:hover, #carousel-next:hover {\r\n    cursor: pointer;\r\n    color: #ce2a1d;\r\n}\r\n\r\n.carousel-item.hidden {\r\n    visibility: hidden;\r\n}\r\n\r\n.carousel-item.hide {\r\n    animation: carousel-hide .5s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.carousel-item.show {\r\n    animation: carousel-show .5s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n@keyframes carousel-hide {\r\n    0% {\r\n        opacity: 100%;\r\n        visibility: visible;\r\n    }\r\n\r\n    100% {\r\n        opacity: 0%;\r\n        visibility: hidden;\r\n    }\r\n}\r\n\r\n@keyframes carousel-show {\r\n    0% {\r\n        opacity: 0%;\r\n        visibility: hidden;\r\n    }\r\n\r\n    100% {\r\n        opacity: 100%;\r\n        visibility: visible;\r\n    }\r\n}\r\n\r\n.carousel-dots {\r\n    font-size: 10px;\r\n    color: grey;\r\n}\r\n\r\n.carousel-dots i {\r\n    transition: color ease 0.3s;\r\n}\r\n\r\n.carousel-dots i.selected {\r\n    color: #212529;\r\n}\r\n\r\ndiv.card {\r\n    transition: 0.3s ease;\r\n}\r\n\r\ndiv.card:hover {\r\n    transform: translateY(-5px);\r\n    border-color: #ffc107;\r\n    box-shadow: 0px 5px 10px rgba(255, 193, 7, 0.7);\r\n}\r\n\r\n.popular-products {\r\n    margin-top: 100px;\r\n}\r\n\r\n.delete-button {\r\n    width: 100px;\r\n}\r\n\r\n.complete-order {\r\n    width: 300px;\r\n}\r\n\r\n/* ФУТЕР, FOOTER */\r\nfooter a:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\nfooter i {\r\n    font-size: 24px;\r\n}\r\n\r\n/* ЗАГРУЗКА, СПИННЕР, LOADING, SPINNER */\r\n.loading-spinner {\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 5px solid rgba(255, 193, 7, 0.3);\r\n    border-radius: 50%;\r\n    border-top-color: #ffc107;\r\n    margin: auto;\r\n    animation: .7s spin infinite linear;\r\n}\r\n\r\n@keyframes spin {\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n}","",{version:3,sources:["webpack://./css/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,eAAe;IACf,2BAA2B;AAC/B;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;IAC5B,6BAA6B;AACjC;;AAEA;IACI,4BAA4B;IAC5B,6BAA6B;AACjC;;AAEA;IACI;QACI,aAAa;QACb,mBAAmB;IACvB;;IAEA;QACI,WAAW;QACX,kBAAkB;IACtB;AACJ;;AAEA;IACI;QACI,WAAW;QACX,kBAAkB;IACtB;;IAEA;QACI,aAAa;QACb,mBAAmB;IACvB;AACJ;;AAEA;IACI,eAAe;IACf,WAAW;AACf;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,2BAA2B;IAC3B,qBAAqB;IACrB,+CAA+C;AACnD;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA,kBAAkB;AAClB;IACI,0BAA0B;AAC9B;;AAEA;IACI,eAAe;AACnB;;AAEA,wCAAwC;AACxC;IACI,YAAY;IACZ,aAAa;IACb,wCAAwC;IACxC,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,mCAAmC;AACvC;;AAEA;IACI;QACI,yBAAyB;IAC7B;AACJ",sourcesContent:["a, a:hover {\r\n    color: white;\r\n    text-decoration: none;\r\n}\r\n\r\n.navbar {\r\n    background-color: #ce2a1d;\r\n}\r\n\r\nmain {\r\n    min-height: 800px;\r\n}\r\n\r\nnav a.nav-link:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n.carousel-item h3 {\r\n    bottom: 15px;\r\n    left: 20px;\r\n}\r\n\r\n#carousel-prev, #carousel-next {\r\n    font-size: 48px;\r\n    transition: color ease 0.3s;\r\n}\r\n\r\n#carousel-prev:hover, #carousel-next:hover {\r\n    cursor: pointer;\r\n    color: #ce2a1d;\r\n}\r\n\r\n.carousel-item.hidden {\r\n    visibility: hidden;\r\n}\r\n\r\n.carousel-item.hide {\r\n    animation: carousel-hide .5s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.carousel-item.show {\r\n    animation: carousel-show .5s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n@keyframes carousel-hide {\r\n    0% {\r\n        opacity: 100%;\r\n        visibility: visible;\r\n    }\r\n\r\n    100% {\r\n        opacity: 0%;\r\n        visibility: hidden;\r\n    }\r\n}\r\n\r\n@keyframes carousel-show {\r\n    0% {\r\n        opacity: 0%;\r\n        visibility: hidden;\r\n    }\r\n\r\n    100% {\r\n        opacity: 100%;\r\n        visibility: visible;\r\n    }\r\n}\r\n\r\n.carousel-dots {\r\n    font-size: 10px;\r\n    color: grey;\r\n}\r\n\r\n.carousel-dots i {\r\n    transition: color ease 0.3s;\r\n}\r\n\r\n.carousel-dots i.selected {\r\n    color: #212529;\r\n}\r\n\r\ndiv.card {\r\n    transition: 0.3s ease;\r\n}\r\n\r\ndiv.card:hover {\r\n    transform: translateY(-5px);\r\n    border-color: #ffc107;\r\n    box-shadow: 0px 5px 10px rgba(255, 193, 7, 0.7);\r\n}\r\n\r\n.popular-products {\r\n    margin-top: 100px;\r\n}\r\n\r\n.delete-button {\r\n    width: 100px;\r\n}\r\n\r\n.complete-order {\r\n    width: 300px;\r\n}\r\n\r\n/* ФУТЕР, FOOTER */\r\nfooter a:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\nfooter i {\r\n    font-size: 24px;\r\n}\r\n\r\n/* ЗАГРУЗКА, СПИННЕР, LOADING, SPINNER */\r\n.loading-spinner {\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 5px solid rgba(255, 193, 7, 0.3);\r\n    border-radius: 50%;\r\n    border-top-color: #ffc107;\r\n    margin: auto;\r\n    animation: .7s spin infinite linear;\r\n}\r\n\r\n@keyframes spin {\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n}"],sourceRoot:""}]);const c=a},645:r=>{"use strict";r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e=r(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(r,e,t){"string"==typeof r&&(r=[[null,r,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<r.length;c++){var s=[].concat(r[c]);t&&o[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),n.push(s))}},n}},15:r=>{"use strict";function n(r,n){(null==n||n>r.length)&&(n=r.length);for(var e=0,t=new Array(n);e<n;e++)t[e]=r[e];return t}r.exports=function(r){var e,t,o=(t=4,function(r){if(Array.isArray(r))return r}(e=r)||function(r,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r)){var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=r[Symbol.iterator]();!(t=(a=c.next()).done)&&(e.push(a.value),!n||e.length!==n);t=!0);}catch(r){o=!0,i=r}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e}}(e,t)||function(r,e){if(r){if("string"==typeof r)return n(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(r,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),A=a.sources.map((function(r){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(r," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:(r,n,e)=>{"use strict";var t,o=function(){var r={};return function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}r[n]=e}return r[n]}}(),i=[];function a(r){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===r){n=e;break}return n}function c(r,n){for(var e={},t=[],o=0;o<r.length;o++){var c=r[o],s=n.base?c[0]+n.base:c[0],l=e[s]||0,A="".concat(s," ").concat(l);e[s]=l+1;var d=a(A),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:A,updater:h(u,n),references:1}),t.push(A)}return t}function s(r){var n=document.createElement("style"),t=r.attributes||{};if(void 0===t.nonce){var i=e.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(r){n.setAttribute(r,t[r])})),"function"==typeof r.insert)r.insert(n);else{var a=o(r.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,A=(l=[],function(r,n){return l[r]=n,l.filter(Boolean).join("\n")});function d(r,n,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(r.styleSheet)r.styleSheet.cssText=A(n,o);else{var i=document.createTextNode(o),a=r.childNodes;a[n]&&r.removeChild(a[n]),a.length?r.insertBefore(i,a[n]):r.appendChild(i)}}function u(r,n,e){var t=e.css,o=e.media,i=e.sourceMap;if(o?r.setAttribute("media",o):r.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}var f=null,p=0;function h(r,n){var e,t,o;if(n.singleton){var i=p++;e=f||(f=s(n)),t=d.bind(null,e,i,!1),o=d.bind(null,e,i,!0)}else e=s(n),t=u.bind(null,e,n),o=function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)};return t(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;t(r=n)}else o()}}r.exports=function(r,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=c(r=r||[],n);return function(r){if(r=r||[],"[object Array]"===Object.prototype.toString.call(r)){for(var t=0;t<e.length;t++){var o=a(e[t]);i[o].references--}for(var s=c(r,n),l=0;l<e.length;l++){var A=a(e[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}e=s}}}}},t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={id:r,exports:{}};return e[r](n,n.exports,o),n.exports}o.m=e,o.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return o.d(n,{a:n}),n},o.d=(r,n)=>{for(var e in n)o.o(n,e)&&!o.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},o.f={},o.e=r=>Promise.all(Object.keys(o.f).reduce(((n,e)=>(o.f[e](r,n),n)),[])),o.u=r=>r+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),o.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),r={},n="clientdevelop_lr5:",o.l=(e,t,i)=>{if(r[e])r[e].push(t);else{var a,c;if(void 0!==i)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var A=s[l];if(A.getAttribute("src")==e||A.getAttribute("data-webpack")==n+i){a=A;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",n+i),a.src=e),r[e]=[t];var d=(n,t)=>{a.onerror=a.onload=null,clearTimeout(u);var o=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((r=>r(t))),n)return n(t)},u=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},o.r=r=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},(()=>{var r;o.g.importScripts&&(r=o.g.location+"");var n=o.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var e=n.getElementsByTagName("script");e.length&&(r=e[e.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=r})(),(()=>{var r={179:0};o.f.j=(n,e)=>{var t=o.o(r,n)?r[n]:void 0;if(0!==t)if(t)e.push(t[2]);else{var i=new Promise(((e,o)=>{t=r[n]=[e,o]}));e.push(t[2]=i);var a=o.p+o.u(n),c=new Error;o.l(a,(e=>{if(o.o(r,n)&&(0!==(t=r[n])&&(r[n]=void 0),t)){var i=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+i+": "+a+")",c.name="ChunkLoadError",c.type=i,c.request=a,t[1](c)}}),"chunk-"+n)}};var n=self.webpackChunkclientdevelop_lr5=self.webpackChunkclientdevelop_lr5||[],e=n.push.bind(n);n.push=n=>{for(var t,i,[a,c,s]=n,l=0,A=[];l<a.length;l++)i=a[l],o.o(r,i)&&r[i]&&A.push(r[i][0]),r[i]=0;for(t in c)o.o(c,t)&&(o.m[t]=c[t]);for(s&&s(o),e(n);A.length;)A.shift()()}})(),(()=>{"use strict";function r(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}const n=function(){function n(){!function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n)}var e,t;return e=n,(t=[{key:"render",value:function(r){document.querySelector("main").innerHTML=r}}])&&r(e.prototype,t),n}();function e(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}const t=function(){function r(){!function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r)}var n,t;return n=r,(t=[{key:"getCurrentPath",value:function(r){var n=window.location.hash.split(/[#/]/);return this.findCorrectView(n,r)}},{key:"findCorrectView",value:function(r,n){var e="homePage",t=0,o=0,i=0;return 3===r.length&&"offer"===r[1]&&0<r[2]&&n.offers.length>=r[2]?(e="offerPage",i=r[2]):2===r.length&&"categories"===r[1]||3===r.length&&"categories"===r[1]&&""===r[2]?e="categoriesPage":3===r.length&&"category"===r[1]&&0<r[2]&&n.categories.length>=r[2]?(e="categoryPage",t=r[2]):3===r.length&&"product"===r[1]&&0<r[2]&&n.products.length>=r[2]?(e="productPage",o=r[2]):2===r.length&&"cart"===r[1]||3===r.length&&"cart"===r[1]&&""===r[2]?e="cartPage":3===r.length&&"order"===r[1]&&""!==r[2]?e="orderCompletePage":2===r.length&&"order"===r[1]||3===r.length&&"order"===r[1]&&""===r[2]?e="orderPage":window.location.hash="",{viewName:e,categoryId:t,productId:o,offerId:i}}}])&&e(n.prototype,t),r}();var i=o(379),a=o.n(i),c=o(174);a()(c.Z,{insert:"head",singleton:!1}),c.Z.locals;var s,l,A=new t,d=new n;function u(r,n,e){0!=r?d.render(l(s,r)):0!=n?d.render(l(s,n)):0!=e?d.render(l(s,e)):d.render(l(s))}function f(){document.querySelector("main").innerHTML='\n    <div class="mt-4 pt-4">\n                <div class="loading-spinner"></div>\n    </div>\n    '}window.onload=function(){f(),fetch("https://my-json-server.typicode.com/danil0110/McDonaldsDB/db").then((function(r){return r.json()})).then((function(r){s=r;var n=A.getCurrentPath(s),e=n.viewName,t=n.categoryId,i=n.productId,a=n.offerId;o(568)("./".concat(e,".js")).then((function(r){l=r.default,u(t,i,a),r.postRender&&r.postRender()}))})),window.scrollTo({top:0,behavior:"smooth"})},window.onhashchange=function(){f();var r=A.getCurrentPath(s),n=r.viewName,e=r.categoryId,t=r.productId,i=r.offerId;o(568)("./".concat(n,".js")).then((function(r){l=r.default,u(e,t,i),r.postRender&&r.postRender()})),window.scrollTo({top:0,behavior:"smooth"})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,